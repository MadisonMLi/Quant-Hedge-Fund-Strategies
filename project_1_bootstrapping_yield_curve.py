# -*- coding: utf-8 -*-
"""Project_1_Bootstrapping Yield Curve.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOawl9p0SRTTUQYDGTYL3Bx6Dm60Qozg

## Group Project 1

## Team #1

## Team Members:

### Date

### Import libraries
"""

!pip install QuantLib

import QuantLib as ql
import numpy as np
import pandas as pd
from scipy.optimize import fsolve

"""### Read the given data and clean up the format"""

data = pd.read_excel('FM5422 Project 1 Data Spring 2024.xlsx',skiprows=2)
input_data =data.drop(columns=['Unnamed: 7','Maturity Date.1'])

input_data

"""### Make sure to convert all the dates to QuantLib Date format"""

input_data['Maturity Date'] = input_data['Maturity Date'].astype(str).apply(lambda d: ql.Date(d, '%Y-%m-%d'))


today = ql.Date(14,1,2024)

input_data[:1]

"""### Calculate the discount factors for the first "Cash" asset."""

# follow the calculation in the excel sheet

for i in input_data.index:
    if input_data.loc[i,'Rate Type']=='Cash Rates':
        daycount=ql.Thirty360(ql.Thirty360.USA).dayCount(today,input_data.loc[i,'Maturity Date'])
        print(daycount)
        rate=input_data.loc[i,'Mid']*daycount/360
        discount=1/(1+rate/100)
        tenor=daycount/365
        spot=2*((1/discount)**(0.5/tenor)-1)
        input_data.loc[i,'DF']=discount
        input_data.loc[i,'Spot']=spot

input_data[:1]

"""### Calculate the 6M discount factor from 6M swap rate"""

for i in input_data.index:
    if input_data.loc[i,'Rate Type']=='Swap Rates':
        daycount=ql.Thirty360(ql.Thirty360.USA).dayCount(today,input_data.loc[i,'Maturity Date'])
        print(daycount)
        rate=input_data.loc[i,'Mid']*daycount/360
        discount=1/(1+rate/100)
        tenor=daycount/365
        spot=2*((1/discount)**(0.5/tenor)-1)
        input_data.loc[i,'DF']=discount
        input_data.loc[i,'Spot']=spot

input_data

sixmonthspot = input_data['DF'].values[1]
print('The discount factor for the 6M swap rate is', sixmonthspot )

"""### Calculate the 1Y discount factor from 1Y swap rate"""

# follow the calculation in the excel sheet, note that the 6M discount factor is already known,
# so we only need to use a solver (root finder) to iteratively find the discount factor
# such that (the discount cash flow) - 1 = 0 as shown in the sheet

print('The discount factor for the 1Y swap rate is', input_data['DF'].values[2])

"""### Start from the 2Y Swap rate, calculate the 2Y discount factor"""

data2 = input_data[2:]

# Not sure if this means we need to use start date as 2Y's Date January 16th, 2026
# if that's the case:
for i in data2.index:
    if data2.loc[i,'Rate Type']=='Swap Rates':
        daycount=ql.Actual360().dayCount(today,data2.loc[i,'Maturity Date'])
        # print(daycount)
        rate=data2.loc[i,'Mid']*daycount/360
        discount=1/(1+rate/100)
        tenor=daycount/365
        spot=2*((1/discount)**(0.5/tenor)-1)
        data2.loc[i,'DF']=discount
        data2.loc[i,'Spot']=spot

data2

#1. Calculate the 4 actual payment dates (use the modified following convention for handling weekend/holidays)

#2. Calculate the 4 coupons on the 4 dates (using the 30/360 day count convention)

#3. Guess an initial 2Y spot rate, which implies a 18M spot rate using the interpolation

#4. With the 6M, 1M, 18M (depends on the 2Y spot rate), 2Y spot rate (variable), we can calculate the 4 discount factors and the cashflows

#5. Use a solver to calculate the implied 2Y spot rate such the total cashflow is 0.  This would be the 2Y spot rate from the 2Y swap rate.

"""### Iteratively repeat the process to solve for the 3Y-50Y spot rates and discount factors"""

schedule = list(ql.Schedule(today,input_data.loc[18,'Maturity Date'],
            ql.Period(ql.Semiannual),
            ql.UnitedStates(0),
            ql.ModifiedFollowing,
            ql.ModifiedFollowing,
            ql.DateGeneration.Forward,
            False,
            ql.Date('16-07-2024', '%d-%m-%Y'),))
df = pd.DataFrame()

df['Dates'] = schedule
quote=input_data.iloc[3:,2:4]





df=df.join(quote.set_index('Maturity Date'), on='Dates')

df.loc[1,'Spot'] = sixmonthspot
df.loc[2,'Spot'] = input_data.loc[2,'Spot']
lastdateindex = 2
df.loc[1,'Spot'] = sixmonthspot
df.loc[2,'Spot'] = input_data.loc[2,'Spot']
lastdateindex = 2

df

def f(x):
    for n in range(i-lastdateindex):
        df.loc[i-n,'Spot']=(x*(df.loc[i-n,'Tenor']-df.loc[lastdateindex,'Tenor'])+df.loc[lastdateindex,'Spot']*(df.loc[i,'Tenor']-df.loc[i-n,'Tenor']))/\
            (df.loc[i,'Tenor']-df.loc[lastdateindex,'Tenor'])
    df['Discount']=1/(1+df['Spot']/2)**(df['Tenor']*2)
    df['DCF']=df['Discount']*df['Cashflow']
    return 100-df.loc[1:i,'DCF'].sum()
for i in df.index[1:]:
    df.loc[i,'AccruedDays']=ql.Thirty360(ql.Thirty360.USA).dayCount(df.loc[i-1,'Dates'],df.loc[i,'Dates'])
    df.loc[i,'Tenor'] = ql.Actual360().dayCount(today,df.loc[i,'Dates'])/365
    if df.loc[i,'Mid']>0:
        df.loc[:i,'Cashflow'] = df['AccruedDays']/360*df.loc[i,'Mid']
        df.loc[i,'Cashflow'] = df.loc[i,'Cashflow']+100
        rate=fsolve(f,df.loc[i,'Mid']/100)
        lastdateindex = i
print(df)

tmpdf=df.iloc[:,[0,6]]
data=input_data.iloc[:,[2]]

data=data.join(tmpdf.set_index('Dates'), on='Maturity Date')

#starting from 3Y - 2027 to 50Y - 2074
#January 16th, 2033  is MLK day
print(data[4:])