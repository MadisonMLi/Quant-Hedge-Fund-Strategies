# -*- coding: utf-8 -*-
"""Project_3_Index Correlation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vIx9Ms-8WdLeaUzbAHOxmbPn57XjMYos
"""

!pip install QuantLib

import matplotlib.pyplot as plt
import QuantLib as ql
import pandas as pd
import numpy as np
import datetime as dt
import scipy.stats as ss
from scipy.stats import norm

sector_name = ['XLU','XLB','XLRE','XLE','XLP','XLI','XLC','XLF','XLY','XLV','XLK']
start_date = ql.Date("2021-10-18","%Y-%m-%d")
end_date = ql.Date("2021-12-17","%Y-%m-%d")

#using data from project 2 for daily r
swaps = pd.read_excel('Project 2 Tesla Data.xlsx',sheet_name="Swap Curve",skiprows=4)
swaps = swaps.iloc[11:,0:2].reset_index(drop = True)
swaps['PX_LAST']=swaps['PX_LAST']/100
print(swaps)

def read_data(sector):
  data = pd.read_excel('Project 3 Data.xlsx',sheet_name=sector,skiprows=4)
  # data = data.loc[:,['Dates','1M_CALL_IMP_VOL_50DELTA_DFLT','1M_PUT_IMP_VOL_50DELTA_DFLT','2M_CALL_IMP_VOL_50DELTA_DFLT','2M_PUT_IMP_VOL_50DELTA_DFLT']]
  data.loc[0:25,'Call_Vol']=data.loc[0:25,'1M_CALL_IMP_VOL_50DELTA_DFLT']/100
  data.loc[26:,'Call_Vol']=data.loc[26:,'1M_CALL_IMP_VOL_50DELTA_DFLT']/100
  data.loc[0:25,'Put_Vol']=data.loc[0:25,'1M_CALL_IMP_VOL_50DELTA_DFLT']/100
  data.loc[26:,'Put_Vol']=data.loc[26:,'1M_CALL_IMP_VOL_50DELTA_DFLT']/100
  data = data.loc[0:43,['Dates','PX_LAST','Call_Vol','Put_Vol']]
  return data

#Anonymous functions taken from code from an assignment in Chris Prouty's class
d1 = lambda S,T,K,r,sig : (np.log(S / K) + (r + 0.5 * sig ** 2) * (T)) / (sig * np.sqrt(T))
d2 = lambda S,T,K,r,sig : d1(S,T,K,r,sig) - sig * np.sqrt(T)
def CallPrice(S,T,K,r,sig):
    cprice = S * norm.cdf(d1(S,T,K,r,sig)) - np.exp(-r * (T)) * K * norm.cdf(d2(S,T,K,r,sig))
    return cprice

def CallDelta(S, T, K, r, sig):
    return norm.cdf(d1(S,T,K,r,sig))

def PutPrice (S,T,K,r,sig):
    pprice = K*np.exp(-r *T)*norm.cdf(-d2(S,T,K,r,sig)) - S*norm.cdf(-d1(S,T,K,r,sig))
    return pprice

def PutDelta(S,T,K,r,sig):
    return norm.cdf(d1(S,T,K,r,sig)) - 1

def compute(sector):
  ticker=read_data(sector)
  ticker['r']=swaps.loc[0:43,'PX_LAST']
  Strike = ticker.loc[0,'PX_LAST']
  ticker['Dates'] = ticker['Dates'].astype(str).apply(lambda d: ql.Date(d, '%Y-%m-%d'))
  for i in ticker.index:
    ticker.loc[i,'t2x']=ql.Actual365Fixed().dayCount(ticker.loc[i,'Dates'],end_date)/365
  ticker['CallPrice']=CallPrice(ticker['PX_LAST'],ticker['t2x'],Strike,ticker['r'],ticker['Call_Vol'])
  ticker['CallDelta']=CallDelta(ticker['PX_LAST'],ticker['t2x'],Strike,ticker['r'],ticker['Call_Vol'])
  ticker['PutPrice']=PutPrice(ticker['PX_LAST'],ticker['t2x'],Strike,ticker['r'],ticker['Put_Vol'])
  ticker['PutDelta']=PutDelta(ticker['PX_LAST'],ticker['t2x'],Strike,ticker['r'],ticker['Put_Vol'])
  ticker['NetDelta']=ticker['CallDelta']+ticker['PutDelta']
  # ticker['DailyPnL'] = ticker['NetDelta']*ticker['PX_LAST'].diff()
  ticker['DailyPnL']=-ticker['NetDelta'].shift(1)*ticker['PX_LAST'].diff()
  for i in ticker.index:
    ticker.loc[i,'HedgePnL']=-ticker.loc[:i,'DailyPnL'].sum()
  ticker['StraddlePnL']=(ticker['CallPrice']+ticker['PutPrice']-ticker.loc[0,'CallPrice']-ticker.loc[0,'PutPrice'])
  return ticker

compute('SPX')

portfolio=pd.DataFrame(sector_name,columns=['Sector'])
portfolio['Weight']=[2.401839,2.527329,2.579896,2.924949,5.670948,8.127506,11.042944,11.499232,12.618698,12.692172,27.914488]
SPX=compute('SPX')
Premium = (SPX.loc[0,'CallPrice']+SPX.loc[0,'PutPrice'])*1000
print(Premium)
result=SPX.iloc[:,0:1]
result['SPX Straddle PnL']=-SPX['StraddlePnL']*1000
result['SPX Hedge PnL']=-SPX['HedgePnL']*1000
result['SPX Daily PnL'] = -SPX['HedgePnL']*1000 +( -SPX['StraddlePnL']*1000)

# result['SPX Daily PnL']= SPX['DailyPnL'] *1000
result['ETF Straddle PnL'] =0
result['ETF Hedge PnL'] =0
result['ETF Daily PnL'] =0
portfolio['Premium']=portfolio['Weight']*Premium/100
for j in portfolio.index:
  tmp=compute(portfolio.loc[j,'Sector'])
  portfolio.loc[j,'No.Contract']=portfolio.loc[j,'Premium']/(tmp.loc[0,'CallPrice']+tmp.loc[0,'PutPrice'])

  result['ETF Straddle PnL']+=portfolio.loc[j,'No.Contract']*tmp['StraddlePnL']
  result['ETF Hedge PnL']+=portfolio.loc[j,'No.Contract']*tmp['HedgePnL']
  result['ETF Daily PnL'] += portfolio.loc[j,'No.Contract']*tmp['HedgePnL']+portfolio.loc[j,'No.Contract']*tmp['StraddlePnL']

  # result['ETF Daily PnL']+=portfolio.loc[j,'No.Contract']*tmp['DailyPnL']
  portfolio.loc[j,'Implied_Vol']=tmp.loc[0,'Call_Vol']
  ret=np.log(tmp['PX_LAST']).diff()
  portfolio.loc[j,'Realized_Vol']=np.sqrt(np.var(ret)*252)

print(portfolio)

indexiv=SPX.loc[0,'Call_Vol']
ret=np.log(SPX['PX_LAST']).diff()
indexrv=np.sqrt(np.var(ret)*252)
portfolio['Weight']=portfolio['Weight']/100
square=portfolio['Weight']**2*portfolio['Implied_Vol']**2
product=portfolio['Weight']*portfolio['Implied_Vol']
implied_corr=(indexiv**2-square.sum())/(product.sum()**2-square.sum())
square=portfolio['Weight']**2*portfolio['Realized_Vol']**2
product=portfolio['Weight']*portfolio['Realized_Vol']
realized_corr=(indexrv**2-square.sum())/(product.sum()**2-square.sum())

result['Total PnL']=result.iloc[:,1]+result.iloc[:,2]+result.iloc[:,3]+result.iloc[:,4]

print(implied_corr)
print(realized_corr)

result

file_path = 'output_new.xlsx'
result.to_excel(file_path, index=False)

